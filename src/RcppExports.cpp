// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// build_network
NumericMatrix build_network(NumericMatrix locs, NumericVector weights, int num_loc_candidate, unsigned int seed, double min_x, double min_y, int steps);
RcppExport SEXP _abmgravity_build_network(SEXP locsSEXP, SEXP weightsSEXP, SEXP num_loc_candidateSEXP, SEXP seedSEXP, SEXP min_xSEXP, SEXP min_ySEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type num_loc_candidate(num_loc_candidateSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_y(min_ySEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_network(locs, weights, num_loc_candidate, seed, min_x, min_y, steps));
    return rcpp_result_gen;
END_RCPP
}
// build_network_wcomp
NumericMatrix build_network_wcomp(NumericMatrix locs, NumericVector weights, NumericVector compliance, int num_loc_candidate, unsigned int seed, double min_x, double min_y, int steps);
RcppExport SEXP _abmgravity_build_network_wcomp(SEXP locsSEXP, SEXP weightsSEXP, SEXP complianceSEXP, SEXP num_loc_candidateSEXP, SEXP seedSEXP, SEXP min_xSEXP, SEXP min_ySEXP, SEXP stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type compliance(complianceSEXP);
    Rcpp::traits::input_parameter< int >::type num_loc_candidate(num_loc_candidateSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_y(min_ySEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(build_network_wcomp(locs, weights, compliance, num_loc_candidate, seed, min_x, min_y, steps));
    return rcpp_result_gen;
END_RCPP
}
// assign_by_gravity
NumericMatrix assign_by_gravity(NumericMatrix pts, NumericMatrix locs, NumericVector weights, int num_loc, unsigned int seed, double min_x, double min_y, int steps, bool use_capacity);
RcppExport SEXP _abmgravity_assign_by_gravity(SEXP ptsSEXP, SEXP locsSEXP, SEXP weightsSEXP, SEXP num_locSEXP, SEXP seedSEXP, SEXP min_xSEXP, SEXP min_ySEXP, SEXP stepsSEXP, SEXP use_capacitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type num_loc(num_locSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_y(min_ySEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_capacity(use_capacitySEXP);
    rcpp_result_gen = Rcpp::wrap(assign_by_gravity(pts, locs, weights, num_loc, seed, min_x, min_y, steps, use_capacity));
    return rcpp_result_gen;
END_RCPP
}
// assign_by_gravity2
NumericMatrix assign_by_gravity2(NumericMatrix pts, NumericMatrix locs, NumericVector weights, int num_loc_choose, int num_loc_candidate, unsigned int seed, double min_x, double min_y, int steps, bool use_capacity, bool replace);
RcppExport SEXP _abmgravity_assign_by_gravity2(SEXP ptsSEXP, SEXP locsSEXP, SEXP weightsSEXP, SEXP num_loc_chooseSEXP, SEXP num_loc_candidateSEXP, SEXP seedSEXP, SEXP min_xSEXP, SEXP min_ySEXP, SEXP stepsSEXP, SEXP use_capacitySEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type locs(locsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type num_loc_choose(num_loc_chooseSEXP);
    Rcpp::traits::input_parameter< int >::type num_loc_candidate(num_loc_candidateSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_y(min_ySEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_capacity(use_capacitySEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_by_gravity2(pts, locs, weights, num_loc_choose, num_loc_candidate, seed, min_x, min_y, steps, use_capacity, replace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abmgravity_build_network", (DL_FUNC) &_abmgravity_build_network, 7},
    {"_abmgravity_build_network_wcomp", (DL_FUNC) &_abmgravity_build_network_wcomp, 8},
    {"_abmgravity_assign_by_gravity", (DL_FUNC) &_abmgravity_assign_by_gravity, 9},
    {"_abmgravity_assign_by_gravity2", (DL_FUNC) &_abmgravity_assign_by_gravity2, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_abmgravity(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
